[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "use-llama.cpp"
version = "0.1.0"
description = "GPU-accelerated AI chat application using llama.cpp"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Parham Hard", email = "parham@example.com"}
]
maintainers = [
    {name = "Parham Hard", email = "parham@example.com"}
]
keywords = ["ai", "chat", "gpu", "llama", "llm", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "llama-cpp-python>=0.3.16",
    "torch>=2.2.0,<3.0.0",
    "numpy>=1.25.0,<2.0.0",
    "openai>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "pylint>=2.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=1.0.0",
]
gpu = [
    "torch>=2.2.0,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/parhamhard/use-llama.cpp"
Documentation = "https://use-llama-cpp.readthedocs.io"
Repository = "https://github.com/parhamhard/use-llama.cpp.git"
Issues = "https://github.com/parhamhard/use-llama.cpp/issues"
Changelog = "https://github.com/parhamhard/use-llama.cpp/blob/main/CHANGELOG.md"

[project.scripts]
use-llama-cpp = "use_llama_cpp.cli.main:main"

[project.gui-scripts]
use-llama-cpp-gui = "use_llama_cpp.gui.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
use_llama_cpp = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
]

[tool.pylint.format]
max-line-length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=use_llama_cpp",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/use_llama_cpp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "llama_cpp.*",
    "torch.*",
]
ignore_missing_imports = true
